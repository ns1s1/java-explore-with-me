{
  "info": {
    "_postman_id": "8c3c3641-668f-4cfb-8a33-e6800bb13d74",
    "name": "Test Explore Witch Me - future comment",
    "description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "30333277"
  },
  "item": [
    {
      "name": "User",
      "item": [
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name, email\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('email');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.name).equal(target.name, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(source.email).equal(target.email, '–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "    {\r\n        \"name\":\"testUser\",\r\n        \"email\":\"testUser@yandex.ru\"\r\n    }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name, email\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('email');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.name).equal(target.name, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º—É –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(source.email).equal(target.email, '–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"testNAme2\",\r\n    \"email\": \"testNAme2@yandex.ru\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Category",
      "item": [
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Copy 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, name\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(source.name).equal(target.name, '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"testCategory\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/categories",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Event",
      "item": [
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.title).equal(source.title, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.annotation).equal(source.annotation, '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.paid.toString()).equal(source.paid.toString(), '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.eventDate).equal(source.eventDate, '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.description).equal(source.description, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), '–®–∏—Ä–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∏—Ä–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), '–î–æ–ª–≥–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"annotation\": \"Deleniti numquam voluptates. Et vero quisquam voluptatem in voluptas nesciunt. Recusandae et dolorem nulla. Id voluptas sit magnam et aut rerum sapiente quis qui. Rem mollitia molestiae occaecati dolores amet.\",\r\n    \"category\": 1,\r\n    \"description\": \"Delectus qui delectus adipisci tempore tempore. Nisi excepturi quis sit sint dolor dolor sapiente omnis illum. Voluptates dolor odit atque rerum non velit et voluptatibus qui. Blanditiis enim qui qui ut quia occaecati officiis voluptas. Quas ipsam ea voluptas voluptas sit reprehenderit iure.\\n \\rBeatae totam sint sint et. Blanditiis dolore accusantium fugiat magnam nihil quisquam quaerat enim ipsam. Non impedit deserunt consequatur numquam aut expedita quia maxime dolores. Laudantium natus eum nostrum. Nobis veniam molestiae et optio et eaque.\\n \\rEt laboriosam ex eos. Dolorum quod et quidem fugit aut porro. Molestias quia illo dolor et explicabo. Delectus quia aut voluptas. Totam sed voluptas maiores. Aperiam aut delectus nisi non.\",\r\n    \"eventDate\": \"2024-03-22 00:10:56\",   \r\n    \"location\": {\r\n        \"lat\": -20.3146,\r\n        \"lon\": 150.5479\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,    \r\n    \"requestModeration\": false,\r\n    \"state\": \"PENDING\",\r\n    \"title\": \"Voluptatem nam fuga eligendi soluta dolorum et.\"    \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "138"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–±—ã—Ç–∏—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 201 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.title).equal(source.title, '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.annotation).equal(source.annotation, '–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.paid.toString()).equal(source.paid.toString(), '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.eventDate).equal(source.eventDate, '–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.description).equal(source.description, '–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), '–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), '–®–∏—Ä–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∏—Ä–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), '–î–æ–ª–≥–æ—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ—Ç–µ –ª–æ–∫–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": " {\r\n       \"annotation\": \"Tenetur atque quaerat blanditiis et. In ut harum dolor quia quisquam nihil vero sit et. Soluta itaque quis laudantium ipsam rerum sed cupiditate reiciendis.\",\r\n    \"category\": 1,\r\n    \"description\": \"Velit voluptatem doloribus expedita nostrum veritatis nihil totam minus. Dolorem culpa eius tempore laudantium impedit reiciendis. Et reprehenderit laboriosam. Illum eos esse ipsa non qui aspernatur. Soluta quia repellendus labore et dolore libero. Eligendi voluptates illum dicta sit aspernatur.\\n \\rQui dignissimos amet et rerum alias. Velit nulla quis. Id doloremque consequuntur possimus omnis ex libero ut autem.\\n \\rAut eveniet fugiat ut expedita minima velit omnis. Aut aliquid consequatur et porro quia amet ab expedita et. Dolor saepe voluptatem rem est rem quo consectetur consequatur facilis. Id consequatur minus eligendi. Inventore repellat sed aut nulla nihil quia. Ipsa quidem expedita ex natus quae fugiat.\",\r\n    \"eventDate\": \"2024-03-22 00:36:32\",   \r\n    \"location\": {\r\n        \"lat\": 38.4,\r\n        \"lon\": -170.4771\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 0,    \r\n    \"requestModeration\": false,\r\n    \"state\": \"PENDING\",\r\n    \"title\": \"Corporis aut quia ducimus suscipit delectus nam dolor fugit.\"   \r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "139"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–±—ã—Ç–∏—è",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response must have status 200 and json body response\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Event must contain fields: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {\r",
                  "    pm.expect(target).to.have.property('id');\r",
                  "    pm.expect(target).to.have.property('title');\r",
                  "    pm.expect(target).to.have.property('annotation');\r",
                  "    pm.expect(target).to.have.property('category');\r",
                  "    pm.expect(target).to.have.property('paid');\r",
                  "    pm.expect(target).to.have.property('eventDate');\r",
                  "    pm.expect(target).to.have.property('initiator');\r",
                  "    pm.expect(target).to.have.property('description');\r",
                  "    pm.expect(target).to.have.property('participantLimit');\r",
                  "    pm.expect(target).to.have.property('state');\r",
                  "    pm.expect(target).to.have.property('createdOn');\r",
                  "    pm.expect(target).to.have.property('publishedOn');\r",
                  "    pm.expect(target).to.have.property('location');\r",
                  "    pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Request data must be equal to response data\", function () {\r",
                  "    pm.expect(target.state).equal(\"PUBLISHED\", 'Event state must change from PENDING to PUBLISHED when stateAction equals PUBLISH_EVENT');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/events/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "107"
                }
              ]
            },
            "description": "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n - –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ —á–µ–º –∑–∞ —á–∞—Å –æ—Ç –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n- —Å–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comment",
      "item": [
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 201\", () => {",
                  "    pm.expect(pm.response.code).to.eq(201)",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "})",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"–°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, text, authorName\", \"eventId\", \"created\", function () {",
                  "pm.expect(target).to.have.property('text');",
                  "pm.expect(target).to.have.property('authorName');",
                  "pm.expect(target).to.have.property('eventId');",
                  "pm.expect(target).to.have.property('created');",
                  "});",
                  "",
                  "pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è:\", () => {",
                  "    var response = pm.response.json();",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.text).equal(source.text, '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"text\": \"text\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "138"
                },
                {
                  "key": "eventId",
                  "value": "107"
                }
              ]
            },
            "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
          },
          "response": []
        },
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 400 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"        \"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "138"
                },
                {
                  "key": "eventId",
                  "value": "107"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 400 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                },
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ text > 1000",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 400 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.be.badRequest;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"Autem doloribus culpa ea aut ut eum atque suscipit. Nam repellat deleniti ab est suscipit non. Repellat autem rerum quia.\\n \\rNihil rerum et. Beatae aliquam molestiae fuga. Ratione quia consequatur qui rerum eligendi excepturi autem saepe.\\n \\rEt qui molestiae perspiciatis sit incidunt. Labore dolorem temporibus est autem eos. Libero nobis id accusantium quisquam quo aut.Autem doloribus culpa ea aut ut eum atque suscipit. Nam repellat deleniti ab est suscipit non. Repellat autem rerum quia.\\n \\rNihil rerum et. Beatae aliquam molestiae fuga. Ratione quia consequatur qui rerum eligendi excepturi autem saepe.\\n \\rEt qui molestiae perspiciatis sit incidunt. Labore dolorem temporibus est autem eos. Libero nobis id accusantium quisquam quo aut.Autem doloribus culpa ea aut ut eum atque suscipit. Nam repellat deleniti ab est suscipit non. Repellat autem rerum quia.\\n \\rNihil rerum et. Beatae aliquam molestiae fuga. Ratione quia consequatur qui rerum eligendi excepturi autem saepe.\\n \\rEt qui molestiae perspiciatis sit incidunt. Labore dolorem temporibus est autem eos. Libero nobis id accusantium quisquam quo aut.Autem doloribus culpa ea aut ut eum atque suscipit. Nam repellat deleniti ab est suscipit non. Repellat autem rerum quia.\\n \\rNihil rerum et. Beatae aliquam molestiae fuga. Ratione quia consequatur qui rerum eligendi excepturi autem saepe.\\n \\rEt qui molestiae perspiciatis sit incidunt. Labore dolorem temporibus est autem eos. Libero nobis id accusantium quisquam quo aut.Autem doloribus culpa ea aut ut eum atque suscipit. Nam repellat deleniti ab est suscipit non. Repellat autem rerum quia.\\n \\rNihil rerum et. Beatae aliquam molestiae fuga. Ratione quia consequatur qui rerum eligendi excepturi autem saepe.\\n \\rEt qui molestiae perspiciatis sit incidunt. Labore dolorem temporibus est autem eos. Libero nobis id accusantium quisquam quo aut.Autem doloribus culpa ea aut ut eum atque suscipit. Nam repellat deleniti ab est suscipit non. Repellat autem rerum quia.\\n \\rNihil rerum et. Beatae aliquam molestiae fuga. Ratione quia consequatur qui rerum eligendi excepturi autem saepe.\\n \\rEt qui molestiae perspiciatis sit incidunt. Labore dolorem temporibus est autem eos. Libero nobis id accusantium quisquam quo aut.\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "1"
                },
                {
                  "key": "eventId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 404 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {",
                  "    pm.response.to.be.notFound;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n\t\"text\": \"text\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:eventId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":eventId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "139"
                },
                {
                  "key": "eventId",
                  "value": "108"
                }
              ]
            },
            "description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
          },
          "response": []
        },
        {
          "name": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, text, authorName, eventId, created\", function () {",
                  "pm.expect(target).to.have.property('id');",
                  "pm.expect(target).to.have.property('text');",
                  "pm.expect(target).to.have.property('authorName');",
                  "pm.expect(target).to.have.property('eventId');",
                  "pm.expect(target).to.have.property('created');",
                  "});",
                  "",
                  "pm.test(\"–î–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–º –≤ –∑–∞–ø—Ä–æ—Å–µ\", function () {",
                  "    pm.expect(target.id).to.not.be.null;",
                  "    pm.expect(target.text).equal(source.text, '–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"testUpdated\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "138"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            },
            "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
          },
          "response": []
        },
        {
          "name": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response must have status 409 and json body response\", function () {",
                  "    pm.response.to.have.status(409); ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"text\": \"testUpdate\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "139"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            },
            "description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
          },
          "response": []
        },
        {
          "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–≤—Ç–æ—Ä–æ–º",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, text, authorName, eventId, created\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('authorName');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "138"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —á—É–∂–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response must have status 409 and json body response\", function () {\r",
                  "    pm.response.to.have.status(409); \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "139"
                },
                {
                  "key": "commentId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ–±—ã—Ç–∏—è",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, text, authorName, eventId, created\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('text');\r",
                  "pm.expect(target).to.have.property('authorName');\r",
                  "pm.expect(target).to.have.property('eventId');\r",
                  "pm.expect(target).to.have.property('created');\r",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments?eventId=107&from=0&size=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "107"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ 200 –∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ json', function () {",
                  "    pm.response.to.be.ok;",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "})",
                  "",
                  "const source = pm.collectionVariables.get('response');",
                  "const target = pm.response.json()[0];",
                  "",
                  "pm.test('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—è: id, text, authorName, eventId, created', function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('text');",
                  "    pm.expect(target).to.have.property('authorName');",
                  "    pm.expect(target).to.have.property('eventId');",
                  "    pm.expect(target).to.have.property('created');",
                  "});",
                  "",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":eventId",
                "comments"
              ],
              "variable": [
                {
                  "key": "eventId",
                  "value": "107"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "id",
      "value": "1"
    },
    {
      "key": "base_url",
      "value": "https://postman-rest-api-learner.glitch.me/"
    },
    {
      "key": "baseUrl",
      "value": "http://localhost:8080"
    }
  ]
}